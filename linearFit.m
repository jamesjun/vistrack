function [mfit mrange] = linearFit(X,Y, XLIM)
%CREATEFIT Create plot of data sets and fits
%   CREATEFIT(X,Y)
%   Creates a plot, similar to the plot in the main Curve Fitting Tool,
%   using the data that you provide as input.  You can
%   use this function with the same data you used with CFTOOL
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of data sets:  1
%   Number of fits:  1

% Data from data set "Y vs. X":
%     X = X:
%     Y = Y:
%     Unweighted

if ~exist('plotcolor')
    plotcolor = 'b';
end

% Auto-generated by MATLAB on 02-Jun-2012 23:35:15

% Set up figure to receive data sets and fits
% figure;
% f_ = gcf;
% % figure(f_);
% set(f_,'Units','Pixels','Position',[658 269 688 485]);
% % Line handles and text for the legend.
legh_ = [];
legt_ = {};
% % Limits of the x-axis.
xlim_ = [Inf -Inf];
% % Axes for the plot.
% ax_ = axes;
ax_ = gca;
% set(ax_,'Units','normalized','OuterPosition',[0 0 1 1]);
% set(ax_,'Box','on');
% axes(ax_);
hold on;



% --- Plot data that was originally in data set "Y vs. X"
X = X(:);
Y = Y(:);
h_ = line(X,Y,'Parent',ax_,'Color',[0.333333 0 0.666667],...
    'LineStyle','none', 'LineWidth',1,...
    'Marker','.', 'MarkerSize',12);
xlim_(1) = min(xlim_(1),min(X));
xlim_(2) = max(xlim_(2),max(X));
legh_(end+1) = h_;
legt_{end+1} = 'Y vs. X';

% Nudge axis limits beyond data limits
if all(isfinite(xlim_))
    xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
    set(ax_,'XLim',xlim_)
else
    set(ax_, 'XLim',[-0.02, 2.02]);
end

% --- Create fit "fit 3"

% Apply exclusion rule
ex_ = (X <= XLIM(1) | X >= XLIM(2));
ok_ = isfinite(X) & isfinite(Y);
if ~all( ok_ )
    warning( 'GenerateMFile:IgnoringNansAndInfs',...
        'Ignoring NaNs and Infs in data.' );
end
ft_ = fittype('poly1');

% Fit this model using new data
if sum(~ex_(ok_))<2
    % Too many points excluded.
    error( 'GenerateMFile:NotEnoughDataAfterExclusionRule',...
        'Not enough data left to fit ''%s'' after applying exclusion rule ''%s''.',...
        'fit 3', 'NRampl' );
else
    cf_ = fit(X(ok_),Y(ok_),ft_,'Exclude',ex_(ok_));
end
% Alternatively uncomment the following lines to use coefficients from the
% original fit. You can use this choice to plot the original fit against new
% data.
%    cv_ = { -2.1044417488542657, 3.5764776730613481};
%    cf_ = cfit(ft_,cv_{:});

% Plot this fit
h_ = plot(cf_,'fit',0.95);
set(h_(1),'Color', plotcolor,...
    'LineStyle','-', 'LineWidth',2,...
    'Marker','none', 'MarkerSize',6);
% Turn off legend created by plot method.
legend off;
% Store line handle and fit name for legend.
legh_(end+1) = h_(1);
legt_{end+1} = 'fit 3';

% --- Finished fitting and plotting data. Clean up.
hold off;
% Display legend
leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
% h_ = legend(ax_,legh_,legt_,leginfo_{:});
% set(h_,'Interpreter','none');
% Remove labels from x- and y-axes.
% xlabel(ax_, xlabelstr);
% ylabel(ax_, ylabelstr);

hold on; 
plot(XLIM(1)*[1 1], get(gca, 'YLim'), 'k');
plot(XLIM(2)*[1 1], get(gca, 'YLim'), 'k');

mfit = cf_.p1;
mrange = confint(cf_);  
mrange = mrange(:,1);

n = numel(X);
titlestr = sprintf('slope = %0.2f, CI:(%0.2f, %0.2f), n=%d', mfit, mrange(1), mrange(2), n);
title(titlestr);

grid on;